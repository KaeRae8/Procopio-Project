#=====================================================================
# 3d.slag
#
# 3.5.0 (2011.06.18)
#
# --------------------------------------------------------------------
#
# Copyright 2008-2011 Plasmaworks LLC
#
#   http://plasmaworks.com/plasmacore
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#   http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, 
# software distributed under the License is distributed on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
# either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
#=====================================================================

compound Vector3( Real64 x, Real64 y, Real64 z )

singleton class Vector3Manager
  METHODS
    method op+( Vector3 a, Vector3 b ).Vector3
      return Vector3( a.x+b.x, a.y+b.y, a.z+b.z )

    method op-( Vector3 a, Vector3 b ).Vector3
      return Vector3( a.x-b.x, a.y-b.y, a.z-b.z )

    method op*( Vector3 a, Vector3 b ).Vector3
      return Vector3( a.x*b.x, a.y*b.y, a.z*b.z )

    method op/( Vector3 a, Vector3 b ).Vector3
      return Vector3( a.x/b.x, a.y/b.y, a.z/b.z )

    method op+( Vector3 a, Real64 b ).Vector3
      return Vector3( a.x+b, a.y+b, a.z+b )

    method op-( Vector3 a, Real64 b ).Vector3
      return Vector3( a.x-b, a.y-b, a.z-b )

    method op*( Vector3 a, Real64 b ).Vector3
      return Vector3( a.x*b, a.y*b, a.z*b )

    method op/( Vector3 a, Real64 b ).Vector3
      return Vector3( a.x/b, a.y/b, a.z/b )

    method op+( Real64 a, Vector3 b ).Vector3
      return Vector3( a+b.x, a+b.y, a+b.z )

    method op-( Real64 a, Vector3 b ).Vector3
      return Vector3( a-b.x, a-b.y, a-b.z )

    method op*( Real64 a, Vector3 b ).Vector3
      return Vector3( a*b.x, a*b.y, a*b.z )

    method op/( Real64 a, Vector3 b ).Vector3
      return Vector3( a/b.x, a/b.y, a/b.z )

    method to_String( Vector3 v ).String
      return "($(.2),$(.2),$(.2))" (v.x,v.y,v.z)

    method to_Vector2( Vector3 v ).Vector2
      return Vector2( v.x, v.y )

    method magnitude( Vector3 v ).Real64
      return sqrt( v.x*v.x + v.y*v.y + v.z*v.z )

    method normalized( Vector3 v ).Vector3
      local var m = sqrt( v.x*v.x + v.y*v.y + v.z*v.z )
      return Vector3( a.x/m, a.y/m, a.z/m )

    method dot( Vector3 a, Vector3 b ).Real64
      return a.x*b.x + a.y*b.y + a.z*b.z

    method cross( Vector3 a, Vector3 b ).Vector3
      return Vector3( a.y*b.z - b.y*a.z, a.z*b.x - b.z*a.x, a.x*b.y - b.x*a.y )

    method projection_on( Vector3 a, Vector3 b ).Vector3
      # Gives the projection of vector 'a' on vector 'b'.
      local var m = sqrt( b.x*b.x + b.y*b.y + b.z*b.z )
      return Vector3( a.x*b.x/m, a.y*b.y/m, a.z*b.z/m )
      
endClass

compound Line3D( Vector3 v1, Vector3 v2 )

singleton class Line3DManager
  METHODS
    method to_Line( Line3D line ).Line
      return Line( Vector2(line.v1.x,line.v1.y), Vector2(line.v2.x,line.v2.y) )
endClass

class Quad3D( Vector3 v1, Vector3 v2, Vector3 v3, Vector3 v4 )
  METHODS
    method to_Quad.Quad
      return Quad( v1.to_Vector2, v2.to_Vector2, v3.to_Vector2, v4.to_Vector2 )

    method draw( Color color )
      return to_Quad.draw( color )

    method fill( Color color )
      return to_Quad.draw( color )
endClass

class Cube( Vector3 top_v1, Vector3 top_v2, Vector3 top_v3, Vector3 top_v4, 
    Vector3 bottom_v1, Vector3 bottom_v2, Vector3 bottom_v3, Vector3 bottom_v4 )
  METHODS
endClass


